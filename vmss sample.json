{
  "$schema": "http://schema.management.azure.com/schemas/2015-01-01-preview/deploymentTemplate.json",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "vmSku": {
       "type": "string",
       "allowedValues": [
          "byol",
          "bundle1",
          "bundle2"
       ],
       "metadata": {
          "description": "Firewall License Model"
       },
       "defaultValue": "bundle1"
    },
    "vmSize": {
       "type": "string",
       "allowedValues": [
          "Standard_D3",
          "Standard_D4",
          "Standard_D3_v2",
          "Standard_D4_v2",
          "Standard_A4",
          "Standard_DS3_v2",
          "Standard_DS4_v2"
       ],
       "metadata": {
          "description": "Azure VM size for VM-Series"
       },
       "defaultValue": "Standard_D3_v2"
    },
    "vmssName": {
      "type": "string",
      "metadata": {
        "description": "String used as a base for naming resources. Must be 3-57 characters in length and globally unique across Azure. A hash is prepended to this string for some resources, and resource-specific information is appended."
      },
      "maxLength": 57
    },
    "imageVersion": {
       "type": "string",
       "allowedValues": [
          "latest",
          "8.1.0",
          "8.0.0"
       ],
       "metadata": {
          "description": "PAN OS Version"
       }
    },
    "ILBaddress": {
      "type": "string",
      "metadata": {
        "description": "IP Address of Internal Load Balancer"
      },
      "defaultValue": "32.32.32.32"
    },
    "adminUsername": {
      "type": "string",
      "defaultValue": "azureadmin",
      "metadata": {
        "description": "Admin username on all VMs."
      }
    },
    "adminPassword": {
      "type": "securestring",
      "defaultValue": "azure@dmin123",
      "metadata": {
        "description": "Admin password on all VMs."
      }
    },
    "customstorageaccount": {
            "type": "string",
            "metadata":{
              "description": "Name of storage account for bootstrap"
            }
      },
    "customaccesskey": {
            "type": "string",
            "metadata":{
              "description": "Storage account access key to read blob data privately"
            }
      },
    "customfileshare": {
            "type": "string",
            "metadata":{
              "description": "File Share containing bootstrap file"
            }
      },
    "api_key": {
             "type": "string",
             "metadata":{
                "description": "API key for firewall"
             }
    },
    "vmScaleSetMinCount": {
      "type": "int",
      "defaultValue": 0, 
      "metadata": {
          "description": "The minimum (and default) number of FWs that will be deployed into the VM Scale Set."
      }
    }, 
    "vmScaleSetMaxCount": {
      "type": "int",
      "defaultValue": 3, 
      "metadata": {
          "description": "The maximum number of FWs that can be deployed into the VM Scale Set."
      }
    },
    "autoScaleMetric": {
             "type": "string",
             "allowedValues": [
                  "DataPlaneCPUUtilizationPct", 
                  "SessionUtilizationPct", 
                  "SslProxyUtilizationPct",
                  "GPGatewayTunnelUtilizationPct",
                  "DPPacketBufferUtilizationPct"
                ], 
             "defaultValue": "SessionUtilization(%)", 
             "metadata": {
                 "description": "Select the metric on which auto scale events should be triggered."
                } 
    },
    "appInsights": {
             "type" : "string",
             "defaultValue": "CREATE_NEW_APP_INSIGHTS_AND_ENTER_NAME_HERE", 
             "metadata": {
                   "description": "Enter the name of your existing Application Insights environment that will be used to receive custom metrics. Instrumetation key needs to be added to bootstrap xml"
        }
    },
    "StorageAccountName": {
      "type": "string",
      "metadata": {
        "description": "This is the name of the your storage account. Enter up to 20 characters"
      }
  }
},
  "variables": {
    "resourceGroupName": "[resourceGroup().name]", 
    "namingInfix": "[toLower(substring(concat(parameters('vmssName'), uniqueString(resourceGroup().id)), 0, 9))]",
    "strAccountName": "[concat(parameters('StorageAccountName'),variables('namingInfix'))]",
    "longNamingInfix": "[toLower(parameters('vmssName'))]",
    "imagePublisher": "paloaltonetworks",
    "imageOffer" : "vmseries1",
    "addressPrefix": "10.0.0.0/16",
    "subnetPrefixuntrust": "10.0.8.0/24",
    "subnetPrefixtrust": "10.0.9.0/24",
    "subnetPrefixmgmt": "10.0.10.0/24",
    "WorkerPrivateIPAddress": "10.0.10.5",
    "virtualNetworkName": "[concat(variables('namingInfix'), 'vnet')]",
    "publicIPAddressName": "[concat(variables('namingInfix'), 'pip')]",
    "autoscaleName": "[concat(variables('namingInfix'), '-as')]",
    "subnetNameUntrust": "[concat(variables('namingInfix'), 'subnetuntrust')]",
    "subnetNameTrust": "[concat(variables('namingInfix'), 'subnettrust')]",
    "subnetNameMgmt": "[concat(variables('namingInfix'), 'subnetmgmt')]",
    "nicNameMgmt": "[concat(variables('namingInfix'), 'nicmgmt')]",
    "nicNameUntrust": "[concat(variables('namingInfix'), 'nicuntrust')]",
    "nicNameTrust": "[concat(variables('namingInfix'), 'nictrust')]",
    "ipConfigNameuntrust": "[concat(variables('namingInfix'), 'ipconfiguntrust')]",
    "ipConfigNametrust": "[concat(variables('namingInfix'), 'ipconfigtrust')]",
    "ipConfigNamemgmt": "[concat(variables('namingInfix'), 'ipconfigmgmt')]",
    "virtualNetworkID": "[resourceId('Microsoft.Network/virtualNetworks',variables('virtualNetworkName'))]",
    "appGwPublicIPAddressName": "[concat(variables('namingInfix'), 'appGwPip')]",
    "WorkerPublicIPAddressName": "[concat(variables('namingInfix'), 'workerPip')]",
    "appGwName": "[concat(variables('namingInfix'), 'appGw')]",
    "appGwPublicIPAddressID": "[resourceId('Microsoft.Network/publicIPAddresses',variables('appGwPublicIPAddressName'))]",
    "appGwID": "[resourceId('Microsoft.Network/applicationGateways',variables('appGwName'))]",
    "appGwSubnetName": "[concat(variables('namingInfix'),'appGwSubnet')]",
    "appGwSubnetPrefix": "10.0.1.0/24",
    "appGwSubnetID": "[concat(variables('virtualNetworkID'),'/subnets/',variables('appGwSubnetName'))]",
    "appGwFrontendPort": 80,
    "appGwBackendPort": 80,
    "appGwBePoolName": "[concat(variables('namingInfix'), 'appGwBepool')]",
    "computeApiVersion": "2017-03-30",
    "networkApiVersion": "2017-04-01",
    "appInsightsApiVersion": "2015-04-01", 
    "appInsightsComponentsApiVersion": "2015-05-01",
    "appInsightsName": "[replace(split(parameters('appInsights'), ':')[0], 'CREATE_NEW_APP_INSIGHTS_AND_ENTER_NAME_HERE', concat(deployment().name, '-appinsights'))]", 
    "appInsightsNameArray": "[split(concat(variables('appInsightsName'), ';', variables('resourceGroupName')) , ';')]", 
    "autoScaleMetric": "[parameters('autoScaleMetric')]", 
     "scaleMetricMap": {
        "DataPlaneCPUUtilizationPct": {
            "metricName": "customMetrics/DataPlaneCPUUtilizationPct", 
            "metricResourceUri": "[resourceId(variables('appInsightsNameArray')[1], 'Microsoft.Insights/components', variables('appInsightsNameArray')[0])]"
        }, 
        "SessionUtilizationPct": {
            "metricName": "customMetrics/panSessionUtilization", 
            "metricResourceUri": "[resourceId(variables('appInsightsNameArray')[1], 'Microsoft.Insights/components', variables('appInsightsNameArray')[0])]"
        }, 
        "SslProxyUtilizationPct": {
            "metricName": "customMetrics/panSessionSslProxyUtilization", 
            "metricResourceUri": "[resourceId(variables('appInsightsNameArray')[1], 'Microsoft.Insights/components', variables('appInsightsNameArray')[0])]"
        },
        "GPGatewayTunnelUtilizationPct": {
          "metricName": "customMetrics/panpanGPGWUtilizationActiveTunnels", 
          "metricResourceUri": "[resourceId(variables('appInsightsNameArray')[1], 'Microsoft.Insights/components', variables('appInsightsNameArray')[0])]"
        },
        "DPPacketBufferUtilizationPct": {
          "metricName": "customMetrics/DataPlanePacketBufferUtilization", 
          "metricResourceUri": "[resourceId(variables('appInsightsNameArray')[1], 'Microsoft.Insights/components', variables('appInsightsNameArray')[0])]"
      }       
    },     
    "customData": "concat['storage-account=', parameters('customstorageaccount'), 'access-key=', parameters('customaccesskey'), 'file-share=', parameters('customfileshare')]"
  },
  "resources": [
    {
      "comments": "# Storage Account",
      "name": "[variables('strAccountName')]",
      "type": "Microsoft.Storage/storageAccounts",
      "location": "[resourceGroup().location]",
      "apiVersion": "2017-04-01",
      "properties": {
        "accountType": "Standard_LRS"
      }
    },
    {
      "type": "Microsoft.Network/virtualNetworks",
      "name": "[variables('virtualNetworkName')]",
      "location": "[resourceGroup().location]",
      "apiVersion": "2017-04-01",
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[variables('addressPrefix')]"
          ]
        },
        "subnets": [
          {
            "name": "[variables('subnetNameUntrust')]",
            "properties": {
              "addressPrefix": "[variables('subnetPrefixuntrust')]"
            }
          },
          {
            "name": "[variables('subnetNameTrust')]",
            "properties": {
              "addressPrefix": "[variables('subnetPrefixtrust')]"
            }
          },
          {
            "name": "[variables('subnetNameMgmt')]",
            "properties": {
              "addressPrefix": "[variables('subnetPrefixmgmt')]"
            }
          },
          {
            "name": "[variables('appGwSubnetName')]",
            "properties": {
              "addressPrefix": "[variables('appGwSubnetPrefix')]"
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[variables('WorkerPublicIPAddressName')]",
      "location": "[resourceGroup().location]",
      "apiVersion": "2017-04-01",
      "properties": {
        "publicIPAllocationMethod": "Dynamic"
      }
    },
    {
      "apiVersion": "2017-04-01",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "worker-eth-0",
      "location": "[resourceGroup().location]",
      "dependsOn": [
          "[concat('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]"
      ],
      "tags": {
        "displayName": "worker-node-eth0]"
      },
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig-worker",
            "properties": {
              "privateIPAllocationMethod": "Static",
              "privateIPAddress": "[variables('WorkerPrivateIPAddress')]",
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses', variables('WorkerpublicIPName'))]"
              },
              "subnet": {
                "id": "[concat('/subscriptions/', subscription().subscriptionId,'/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'), '/subnets/', variables('subnetNameMgmt'))]"
              }
            }
          }
        ]
      }
    },    
    {
      "apiVersion": "2017-04-01",
      "type": "Microsoft.Compute/virtualMachines",
      "name": "worker-node",
      "location": "[resourceGroup().location]",
      "dependsOn": [],
      "properties": {
          "hardwareProfile": {
              "vmSize": "Standard_A1"
          },
          "osProfile": {
              "computername": "worker-vm",
              "adminUsername": "[variables('adminUsername')]",
              "adminPassword": "[variables('adminPassword')]"
          },
          "storageProfile": {
             "imageReference": {
                  "publisher": "Canonical",
                  "offer": "UbuntuServer",
                  "sku": "16.04-LTS",
                  "version": "latest"
              },
              "osDisk": {
                  "name": "worker-osdisk",
                  "vhd": {
                      "uri": "[concat(reference(concat('Microsoft.Storage/storageAccounts/', variables('strAccountName')), variables('networkApiVersion')).primaryEndpoints.blob,'vhds/osdisk.vhd')]"
                  },
                  "caching": "ReadWrite",
                  "createOption": "FromImage"
              }
          },
          "networkProfile": {
             "networkInterfaces": [
               {
                 "id": "[resourceId('Microsoft.Network/networkInterfaces',concat('worker-eth-0'))]",
                 "properties": { "primary": true}
               }
             ]
          }
      }
    },
    {
      "name": "[concat('worker-node','/vm-customscript')]",
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "apiVersion": "2017-04-01",
      "location": "[resourceGroup().location]",
      "dependsOn": [
          "[concat('Microsoft.Compute/virtualMachines/', 'worker-node')]"
      ],
      "properties":
       {
            "publisher": "Microsoft.Azure.Extensions",
            "type": "CustomScript",
            "typeHandlerVersion": "2.0",
            "settings": {
               "fileUris": ["https://raw.githubusercontent.com/PaloAltoNetworks/azure-autoscaling/master/node_worker.py"],
               "commandToExecute": "apt-get -y update && apt-get install -y python-pip && pip install azure-cli bottle bottledaemon && python node_worker.py"
           }
      }
    },
    {
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[variables('appGwPublicIPAddressName')]",
      "location": "[resourceGroup().location]",
      "apiVersion": "2017-04-01",
      "properties": {
        "publicIPAllocationMethod": "Dynamic"
      }
    },
    {
      "type": "Microsoft.Network/applicationGateways",
      "name": "[variables('appGwName')]",
      "location": "[resourceGroup().location]",
      "apiVersion": "2017-04-01",
      "dependsOn": [
        "[concat('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]",
        "[concat('Microsoft.Network/publicIPAddresses/', variables('appGwPublicIPAddressName'))]"
      ],
      "properties": {
        "sku": {
          "name": "Standard_Large",
          "tier": "Standard",
          "capacity": "10"
        },
        "gatewayIPConfigurations": [
          {
            "name": "appGwIpConfig",
            "properties": {
              "subnet": {
                "id": "[variables('appGwSubnetID')]"
              }
            }
          }
        ],
        "frontendIPConfigurations": [
          {
            "name": "appGwFrontendIP",
            "properties": {
              "PublicIPAddress": {
                "id": "[variables('appGwPublicIPAddressID')]"
              }
            }
          }
        ],
        "frontendPorts": [
          {
            "name": "appGwFrontendPort",
            "properties": {
              "Port": "[variables('appGwFrontendPort')]"
            }
          }
        ],
        "backendAddressPools": [
          {
            "name": "[variables('appGwBePoolName')]"
          }
        ],
        "backendHttpSettingsCollection": [
          {
            "name": "appGwBackendHttpSettings",
            "properties": {
              "Port": "[variables('appGwBackendPort')]",
              "Protocol": "Http",
              "CookieBasedAffinity": "Disabled"
            }
          }
        ],
        "httpListeners": [
          {
            "name": "appGwHttpListener",
            "properties": {
              "FrontendIPConfiguration": {
                "Id": "[concat(variables('appGwID'), '/frontendIPConfigurations/appGwFrontendIP')]"
              },
              "FrontendPort": {
                "Id": "[concat(variables('appGwID'), '/frontendPorts/appGwFrontendPort')]"
              },
              "Protocol": "Http",
              "SslCertificate": null
            }
          }
        ],
        "requestRoutingRules": [
          {
            "Name": "rule1",
            "properties": {
              "RuleType": "Basic",
              "httpListener": {
                "id": "[concat(variables('appGwID'), '/httpListeners/appGwHttpListener')]"
              },
              "backendAddressPool": {
                "id": "[concat(variables('appGwID'), '/backendAddressPools/', variables('appGwBePoolName'))]"
              },
              "backendHttpSettings": {
                "id": "[concat(variables('appGwID'), '/backendHttpSettingsCollection/appGwBackendHttpSettings')]"
              }
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Compute/virtualMachineScaleSets",
      "name": "[variables('namingInfix')]",
      "location": "[resourceGroup().location]",
      "apiVersion": "2017-03-30",
      "dependsOn": [
        "[concat('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]",
        "[concat('Microsoft.Network/applicationGateways/', variables('appGwName'))]"
      ],
      "sku": {
        "name": "[parameters('vmSize')]",
        "tier": "Standard",
        "capacity": "[parameters('vmScaleSetMinCount')]"
      },
      "plan": {
         "name": "[parameters('vmSku')]",
         "product": "[variables('imageOffer')]",
         "publisher": "[variables('imagePublisher')]"
      },
      "properties": {
        "overprovision": "false",
        "singlePlacementGroup": "false",
        "upgradePolicy": {
          "mode": "Automatic"
        },
        "virtualMachineProfile": {
          "storageProfile": {
            "osDisk": {
                "managedDisk": {
                        "storageAccountType": "Standard_LRS"
                },
                "caching": "ReadWrite",
                "createOption": "FromImage",
                "diskSizeGB": 60
            },
            "dataDisks": [],
            "imageReference": {
                "publisher": "[variables('imagePublisher')]",
                "offer": "[variables('imageOffer')]",
                "sku": "[parameters('vmSku')]",
                "version": "[parameters('imageVersion')]"
            }
          },
          "osProfile": {
            "computerNamePrefix": "[variables('namingInfix')]",
            "adminUsername": "[parameters('adminUsername')]",
            "adminPassword": "[parameters('adminPassword')]",
            "customData": "[base64(parameters('customData'))]"
          },
          "networkProfile": {
            "networkInterfaceConfigurations": [
              {
                "name": "[variables('nicNameMgmt')]",
                "properties": {
                  "primary": "true",
                  "ipConfigurations": [
                    {
                      "name": "[variables('ipConfigNamemgmt')]",
                      "properties": {
                        "subnet": {
                          "id": "[concat('/subscriptions/', subscription().subscriptionId,'/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'), '/subnets/', variables('subnetNameMgmt'))]"
                        }
                      }
                    }
                  ]
                }
              },
              {
                "name": "[variables('nicNameUntrust')]",
                "properties": {
                  "primary": "false",
                  "ipConfigurations": [
                    {
                      "name": "[variables('ipConfigNameuntrust')]",
                      "properties": {
                        "subnet": {
                          "id": "[concat('/subscriptions/', subscription().subscriptionId,'/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'), '/subnets/', variables('subnetNameUntrust'))]"
                        },
                        "ApplicationGatewayBackendAddressPools": [
                            {
                              "id": "[concat('/subscriptions/', subscription().subscriptionId,'/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Network/applicationGateways/', variables('appGwName'), '/backendAddressPools/', variables('appGwBePoolName'))]"
                            }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "name": "[variables('nicNameTrust')]",
                "properties": {
                  "primary": "false",
                  "ipConfigurations": [
                    {
                      "name": "[variables('ipConfigNametrust')]",
                      "properties": {
                        "subnet": {
                          "id": "[concat('/subscriptions/', subscription().subscriptionId,'/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'), '/subnets/', variables('subnetNameTrust'))]"
                        }

                      }
                    }
                  ]
                }
              }
            ]
          }
        }
      }
    },
    {
        "type": "microsoft.insights/autoscalesettings",
        "name": "[variables('autoscaleName')]",
        "apiVersion": "2014-04-01",
        "location": "[resourceGroup().location]",
        "tags": {},
        "scale": null,
        "properties": {
            "profiles": [
                {
                    "name": "Auto created scale condition",
                    "capacity": {
                      "default": "[parameters('vmScaleSetMinCount')]", 
                      "maximum": "[parameters('vmScaleSetMaxCount')]", 
                      "minimum": "[parameters('vmScaleSetMinCount')]"
                    },
                    "rules": [
                        {
                            "metricTrigger": {
                              "metricName": "[variables('scaleMetricMap')[variables('autoScaleMetric')].metricName]", 
                                "metricNamespace": "",
                                "metricResourceUri": "[variables('scaleMetricMap')[variables('autoScaleMetric')].metricResourceUri]",
                                "timeGrain": "PT1M",
                                "statistic": "Average",
                                "timeWindow": "PT10M",
                                "timeAggregation": "Average",
                                "operator": "GreaterThan",
                                "threshold": 70
                            },
                            "scaleAction": {
                                "direction": "Increase",
                                "type": "ChangeCount",
                                "value": "1",
                                "cooldown": "PT5M"
                            }
                        },
                            {
                            "scaleAction": {
                                "direction": "Decrease",
                                "type": "ChangeCount",
                                "value": "1",
                                "cooldown": "PT5M"
                            },
                            "metricTrigger": {
                                "metricName": "[variables('scaleMetricMap')[variables('autoScaleMetric')].metricName]",
                                "metricNamespace": "",
                                "metricResourceUri": "[variables('scaleMetricMap')[variables('autoScaleMetric')].metricResourceUri]",
                                "operator": "LessThan",
                                "statistic": "Average",
                                "threshold": 20,
                                "timeAggregation": "Average",
                                "timeGrain": "PT1M",
                                "timeWindow": "PT10M"
                            }
                      }
                    ]
                }
            ],
            "notifications": [
            {
                "operation": "Scale",
                "email": {
                    "sendToSubscriptionAdministrator": false,
                    "sendToSubscriptionCoAdministrators": false,
                    "customEmails": []
                },
                "webhooks": [
                    {
                        "serviceUri": "concat['http://', 'variables('WorkerPrivateIPAddress')']",
                        "properties": {
                          "api-key" : "[variables('api_key')]",
                          "ilb-address": "[variables('ILBaddress')]"
                        }
                    }
                ]
            }
        ],
            "enabled": true,
            "name": "[variables('autoscaleName')]",
            "targetResourceUri": "[resourceId('Microsoft.Compute/virtualMachineScaleSets', variables('namingInfix'))]"
        },
        "dependsOn": [
            "[resourceId('Microsoft.Compute/virtualMachineScaleSets', variables('namingInfix'))]"
        ]
    }
  ]
}